{"version":3,"file":"p__Annotator__index.e7a8d1d5.async.js","mappings":";AA0KA","sources":["webpack://app/./src/pages/Annotator/components/FormModal/index.tsx"],"sourcesContent":["import { DATA } from '@/services/type';\nimport { DeleteOutlined, PlusSquareOutlined } from '@ant-design/icons';\nimport {\n  Button,\n  Form,\n  Input,\n  List,\n  Modal,\n  Popconfirm,\n  Upload,\n  UploadFile,\n} from 'antd';\nimport { MAX_FILE_COUNT, MAX_FILE_SIZE } from '../../constants';\nimport { useModel } from '@umijs/max';\nimport { RcFile } from 'antd/es/upload';\nimport styles from './index.less';\nimport { useImmer } from 'use-immer';\nimport { LabelImageFile } from '@/types/annotator';\nimport { useEffect, useState } from 'react';\nimport { useLocale } from '@/locales/helper';\n\ninterface IProps {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const FormModal: React.FC<IProps> = ({ open, setOpen }: IProps) => {\n  const { localeText } = useLocale();\n  const [form] = Form.useForm<{\n    fileList: UploadFile[];\n    categoryStr: string;\n    tempCategories: DATA.Category[];\n  }>();\n\n  const { images, categories, setImages, setCategories } =\n    useModel('Annotator.model');\n\n  /** Temporarily store Image in the Form */\n  const [tempImages, setTempImages] = useImmer<UploadFile[]>([]);\n\n  /** Temporarily Displayed Category in the Form */\n  const [tempCategories, setTempCategories] =\n    useImmer<DATA.Category[]>(categories);\n\n  useEffect(() => {\n    // Add existing images to form data\n    form.setFieldValue(\n      'fileList',\n      tempImages.map((item) => ({\n        uid: item.uid,\n        name: item.name,\n        status: 'done',\n        url: item.thumbUrl || item.url,\n      })),\n    );\n  }, [tempImages]);\n\n  useEffect(() => {\n    // Sync the latest categories to form data, considering the categories could be added out of the form\n    setTempCategories(categories);\n  }, [open]);\n\n  const validateImages = (_: any, fileList: RcFile[]) => {\n    if (!fileList || fileList.length === 0) {\n      return Promise.reject(localeText('annotator.formModal.fileRequiredMsg'));\n    }\n\n    if (fileList.length > MAX_FILE_COUNT) {\n      return Promise.reject(\n        localeText('annotator.formModal.fileCountLimitMsg', {\n          count: MAX_FILE_COUNT,\n        }),\n      );\n    }\n\n    const hasExceededSize = fileList.some(\n      (file) => file.size / 1024 / 1024 > MAX_FILE_SIZE,\n    );\n    if (hasExceededSize) {\n      return Promise.reject(\n        localeText('annotator.formModal.fileSizeLimitMsg', {\n          size: MAX_FILE_SIZE,\n        }),\n      );\n    }\n\n    return Promise.resolve();\n  };\n\n  const onImagePreview = async (file: UploadFile) => {\n    let src = file.thumbUrl || (file.url as string);\n    if (!src) {\n      src = await new Promise((resolve) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj as RcFile);\n        reader.onload = () => resolve(reader.result as string);\n      });\n    }\n    const image = new Image();\n    image.src = src;\n    const imgWindow = window.open(src);\n    imgWindow?.document.write(image.outerHTML);\n  };\n\n  const loadBase64Images = (files: UploadFile[]) => {\n    const promises = files.map((file) => {\n      return new Promise<void>((resolve, reject) => {\n        const reader = new FileReader();\n        reader.readAsDataURL(file.originFileObj as RcFile);\n        reader.onload = () => {\n          const base64 = reader.result as string;\n          const image = new Image();\n          image.src = base64;\n          image.onload = () => {\n            const item: LabelImageFile = {\n              id: file.uid,\n              url: base64,\n              urlFullRes: base64,\n              fileName: file.name,\n              width: image.width,\n              height: image.height,\n              objects: [],\n            };\n            setImages((images) => [...images, item]);\n            resolve();\n          };\n          image.onerror = (error) => {\n            reject(error);\n          };\n        };\n        reader.onerror = (error) => {\n          reject(error);\n        };\n      });\n    });\n    Promise.all(promises)\n      .then(() => {})\n      .catch((err) => {\n        console.log(err);\n      });\n  };\n\n  const updateImages = (fileList: UploadFile[]) => {\n    const submitFileIds = fileList.map((file) => file.uid);\n    const existingImageIds = images.map((image) => image.id);\n\n    // Delete files that are not present in fileList\n    const savedImages = images.filter(\n      (image) =>\n        submitFileIds.includes(image.id) && existingImageIds.includes(image.id),\n    );\n    setImages(savedImages);\n\n    // Load new files that are not present in images\n    const newFiles = fileList.filter(\n      (file) => !existingImageIds.includes(file.uid),\n    );\n    loadBase64Images(newFiles);\n  };\n\n  const validateCategories = () => {\n    if (tempCategories.length === 0) {\n      return Promise.reject(\n        localeText('annotator.formModal.categoryRequiredMsg'),\n      );\n    }\n    return Promise.resolve();\n  };\n\n  const convertInputToLabels = (text: string): string[] => {\n    const labels = text\n      .split('\\n')\n      .map((s) => s.trim())\n      .filter(Boolean);\n    return labels;\n  };\n\n  const addLabelsToTempCategories = (labels: string[]) => {\n    const existing = [...tempCategories].map((item) => item.name);\n    const newCategories: DATA.Category[] = [];\n    labels.forEach((label) => {\n      if (existing.includes(label)) return;\n      existing.push(label);\n      newCategories.push({\n        id: label,\n        name: label,\n      });\n    });\n    setTempCategories([...tempCategories, ...newCategories]);\n  };\n\n  const addTempCategories = () => {\n    const text = form.getFieldValue('categoryStr');\n    const labels = convertInputToLabels(text);\n    addLabelsToTempCategories(labels);\n    form.setFieldValue('categoryStr', '');\n    form.validateFields();\n  };\n\n  const deleteTempCategories = (name: string) => {\n    setTempCategories(tempCategories.filter((item) => item.name !== name));\n  };\n\n  const [confirmDelOpen, setConfirmDelOpen] = useState(-1);\n  const hasRelatedAnnots = (categoryName: string) => {\n    return !!images.find((image) =>\n      image.objects.find((obj) => obj.categoryName === categoryName),\n    );\n  };\n\n  return (\n    <Modal\n      open={open}\n      centered\n      width={700}\n      title={localeText('annotator.formModal.title')}\n      onCancel={() => {\n        form.validateFields().then(() => {\n          setOpen(false);\n        });\n      }}\n      onOk={() => {\n        form\n          .validateFields()\n          .then((values) => {\n            // update tempImages & images & categories\n            const { fileList } = values;\n            setTempImages(fileList);\n            updateImages(fileList);\n            setCategories(tempCategories);\n\n            // close modal\n            setOpen(false);\n          })\n          .catch((info) => {\n            console.log('Validate Failed:', info);\n          });\n      }}\n    >\n      <Form layout=\"vertical\" form={form} requiredMark={false}>\n        <Form.Item\n          style={{ margin: '30px 0' }}\n          label={<h4>{localeText('annotator.formModal.importImages')}</h4>}\n          name=\"fileList\"\n          valuePropName=\"fileList\"\n          getValueFromEvent={(e) => e && e.fileList}\n          required\n          rules={[{ validator: validateImages }]}\n          extra={\n            <p>\n              {localeText('annotator.formModal.imageTips', {\n                count: MAX_FILE_COUNT,\n                size: MAX_FILE_SIZE,\n              })}\n            </p>\n          }\n        >\n          <Upload\n            showUploadList={true}\n            beforeUpload={() => false}\n            multiple\n            listType=\"picture-card\"\n            onPreview={onImagePreview}\n            accept={'image/png, image/jpeg, image/jpg'}\n          >\n            <Button icon={<PlusSquareOutlined />}></Button>\n          </Upload>\n        </Form.Item>\n        <Form.Item\n          label={<h4>{localeText('annotator.formModal.categories')}</h4>}\n        >\n          <div className={styles.categories}>\n            <div className={styles['categories-add']}>\n              <Form.Item name=\"categoryStr\" initialValue={''}>\n                <Input.TextArea\n                  className={styles['categories-add-textarea']}\n                  rows={6}\n                  placeholder={localeText(\n                    'annotator.formModal.categoryPlaceholder',\n                  )}\n                  onKeyDown={(e) => e.stopPropagation()}\n                  allowClear\n                  value={form.getFieldValue('categoryStr')}\n                />\n              </Form.Item>\n              <Button\n                className={styles['categories-add-btn']}\n                onClick={addTempCategories}\n              >\n                {localeText('annotator.formModal.addCategory')}\n              </Button>\n            </div>\n            <div className={styles['categories-current']}>\n              <Form.Item\n                name=\"tempCategories\"\n                rules={[{ validator: validateCategories }]}\n              >\n                <List\n                  className={styles['categories-current-list']}\n                  bordered\n                  size=\"small\"\n                  dataSource={tempCategories}\n                  renderItem={(item, index) => (\n                    <List.Item\n                      className={styles['categories-current-list-item']}\n                      style={{ padding: '2px 16px' }}\n                      key={item.id}\n                      actions={[\n                        <Popconfirm\n                          key={index}\n                          overlayStyle={{ width: '300px' }}\n                          title={localeText(\n                            'annotator.formModal.deleteCategory.title',\n                          )}\n                          description={localeText(\n                            'annotator.formModal.deleteCategory.desc',\n                          )}\n                          open={confirmDelOpen === index}\n                          onConfirm={() => {\n                            setConfirmDelOpen(-1);\n                          }}\n                          showCancel={false}\n                        >\n                          <Button\n                            danger\n                            type=\"text\"\n                            icon={<DeleteOutlined />}\n                            key=\"delete\"\n                            onClick={() => {\n                              if (hasRelatedAnnots(item.name)) {\n                                setConfirmDelOpen(index);\n                              } else {\n                                deleteTempCategories(item.name);\n                                setConfirmDelOpen(-1);\n                              }\n                            }}\n                          />\n                        </Popconfirm>,\n                      ]}\n                    >\n                      {item.name}\n                    </List.Item>\n                  )}\n                />\n              </Form.Item>\n              <p className={styles['categories-current-text']}>{`${localeText(\n                'annotator.formModal.categoriesCount',\n              )}: ${tempCategories.length}`}</p>\n            </div>\n          </div>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n"],"names":[],"sourceRoot":""}