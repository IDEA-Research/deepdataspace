{"version":3,"file":"p__Annotator__index.71047163.async.js","mappings":";AAsJA","sources":["webpack://app/./src/pages/Annotator/components/FormModal/index.tsx"],"sourcesContent":["import { DeleteOutlined, UploadOutlined } from '@ant-design/icons';\nimport {\n  Alert,\n  Button,\n  Form,\n  Input,\n  List,\n  Modal,\n  Upload,\n  UploadFile,\n  notification,\n} from 'antd';\nimport { MAX_FILE_COUNT, MAX_FILE_SIZE } from '../../constants';\nimport { useModel } from '@umijs/max';\nimport { UploadProps } from 'antd/es/upload';\nimport styles from './index.less';\nimport { useImmer } from 'use-immer';\nimport { LabelImageFile } from '@/types/annotator';\nimport { useCallback, useEffect } from 'react';\nimport { useLocale } from 'dds-utils/locale';\nimport { UploadImageList } from '@/components/UploadImageList';\nimport { cloneDeep } from 'lodash';\nimport { ArgsProps } from 'antd/es/notification/interface';\nimport { Category } from '@/types';\n\ninterface IProps {\n  open: boolean;\n  setOpen: React.Dispatch<React.SetStateAction<boolean>>;\n}\n\nexport const FormModal: React.FC<IProps> = ({ open, setOpen }: IProps) => {\n  const { localeText } = useLocale();\n  const [form] = Form.useForm<{\n    fileList: UploadFile[];\n    categoryStr: string;\n    tempCategories: Category[];\n  }>();\n\n  const { images, categories, setImages, setCategories } =\n    useModel('Annotator.model');\n\n  /** Temporarily store Image in the Form */\n  const [tempImages, setTempImages] = useImmer<UploadFile[]>([]);\n\n  /** Temporarily Displayed Category in the Form */\n  const [tempCategories, setTempCategories] = useImmer<Category[]>(categories);\n\n  const [api, contextHolder] = notification.useNotification();\n  const openNotification = (props: ArgsProps) => {\n    api.info({\n      ...props,\n      placement: 'topRight',\n    });\n  };\n\n  /**\n   * Logics for importing files\n   */\n\n  const handleUploadChange: UploadProps['onChange'] = ({ file, fileList }) => {\n    // ensure excute once while batch upload files\n    if (file.uid !== fileList[fileList.length - 1].uid) return;\n\n    const validFiles = fileList\n      .filter((file) => !(file.size && file.size / 1024 / 1024 > MAX_FILE_SIZE))\n      .slice(0, MAX_FILE_COUNT)\n      .map((file) => {\n        const objectUrl = URL.createObjectURL(file.originFileObj as Blob);\n        file.url = objectUrl;\n        file.thumbUrl = objectUrl;\n        return file;\n      });\n    setTempImages(validFiles);\n  };\n\n  const hasAnnotsOnImage = useCallback(\n    (index: number) => {\n      return images[index] && images[index].objects.length > 0;\n    },\n    [images],\n  );\n\n  const onRemoveTempFile = useCallback(\n    (index: number) => {\n      if (hasAnnotsOnImage(index)) {\n        openNotification({\n          message: localeText('annotator.formModal.deleteImage.title'),\n          description: localeText('annotator.formModal.deleteImage.desc'),\n          duration: 3,\n        });\n        return;\n      }\n      const newList = cloneDeep(tempImages);\n      newList.splice(index, 1);\n      setTempImages(newList);\n    },\n    [tempImages, hasAnnotsOnImage],\n  );\n\n  const updateImages = (fileList: UploadFile[]) => {\n    const submitFileIds = fileList.map((file) => file.uid);\n    const existingImageIds = images.map((image) => image.id);\n\n    // Delete files that are not present in fileList\n    const savedImages = images.filter(\n      (image) =>\n        submitFileIds.includes(image.id) && existingImageIds.includes(image.id),\n    );\n    setImages(savedImages);\n\n    // Load new files that are not present in images\n    const newFiles = fileList.filter(\n      (file) => !existingImageIds.includes(file.uid),\n    );\n\n    // updated images\n    const imageFiles = newFiles.map((file) => {\n      const objectUrl =\n        file.url || URL.createObjectURL(file.originFileObj as Blob);\n      const item: LabelImageFile = {\n        id: file.uid,\n        url: objectUrl,\n        urlFullRes: objectUrl,\n        fileName: file.name,\n        objects: [],\n      };\n      return item;\n    });\n    setImages((images) => [...images, ...imageFiles]);\n  };\n\n  /**\n   * Logics for editing categories\n   */\n\n  useEffect(() => {\n    // Sync the latest categories to form data, considering the categories could be added out of the form\n    setTempCategories(categories);\n  }, [open]);\n\n  const validateCategories = () => {\n    if (tempCategories.length === 0) {\n      return Promise.reject(\n        localeText('annotator.formModal.categoryRequiredMsg'),\n      );\n    }\n    return Promise.resolve();\n  };\n\n  const convertInputToLabels = (text: string): string[] => {\n    const labels = text\n      .split('\\n')\n      .map((s) => s.trim())\n      .filter(Boolean);\n    return labels;\n  };\n\n  const addLabelsToTempCategories = (labels: string[]) => {\n    const existing = [...tempCategories].map((item) => item.name);\n    const newCategories: Category[] = [];\n    labels.forEach((label) => {\n      if (existing.includes(label)) return;\n      existing.push(label);\n      newCategories.push({\n        id: label,\n        name: label,\n      });\n    });\n    setTempCategories([...tempCategories, ...newCategories]);\n  };\n\n  const addTempCategories = () => {\n    const text = form.getFieldValue('categoryStr');\n    const labels = convertInputToLabels(text);\n    addLabelsToTempCategories(labels);\n    form.setFieldValue('categoryStr', '');\n    form.validateFields();\n  };\n\n  const deleteTempCategories = (name: string) => {\n    setTempCategories(tempCategories.filter((item) => item.name !== name));\n  };\n\n  const hasRelatedAnnots = (categoryName: string) => {\n    return !!images.find((image) =>\n      image.objects.find((obj) => obj.categoryName === categoryName),\n    );\n  };\n\n  return (\n    <Modal\n      open={open}\n      centered\n      width={700}\n      title={localeText('annotator.formModal.title')}\n      onCancel={() => {\n        form.validateFields().then(() => {\n          setOpen(false);\n        });\n      }}\n      onOk={() => {\n        form\n          .validateFields()\n          .then(() => {\n            updateImages(tempImages);\n            setCategories(tempCategories);\n            setOpen(false);\n          })\n          .catch((info) => {\n            console.log('Validate Failed:', info);\n          });\n      }}\n    >\n      {contextHolder}\n      <Alert\n        message={localeText('annotator.notice')}\n        type=\"info\"\n        showIcon\n        style={{ margin: '20px 0' }}\n      />\n      <Form layout=\"vertical\" form={form} requiredMark={false}>\n        <Form.Item\n          label={<h4>{localeText('annotator.formModal.importImages')}</h4>}\n          name=\"fileList\"\n          required\n          extra={\n            <>\n              {tempImages.length > 0 && (\n                <UploadImageList\n                  files={tempImages}\n                  colume={4}\n                  containerWidth={652}\n                  containerHeight={270}\n                  onRemoveFile={onRemoveTempFile}\n                />\n              )}\n              <p>\n                {localeText('annotator.formModal.imageTips', {\n                  count: MAX_FILE_COUNT,\n                  size: MAX_FILE_SIZE,\n                })}\n              </p>\n            </>\n          }\n        >\n          <Upload\n            className={styles.upload}\n            multiple={true}\n            showUploadList={false}\n            beforeUpload={() => false}\n            accept={'image/png, image/jpeg, image/jpg'}\n            fileList={tempImages}\n            maxCount={MAX_FILE_COUNT}\n            openFileDialogOnClick={tempImages.length < MAX_FILE_COUNT}\n            onChange={handleUploadChange}\n          >\n            <Button\n              className={styles.uploadBtn}\n              type=\"primary\"\n              icon={<UploadOutlined />}\n              style={{ marginBlockEnd: '10px' }}\n              disabled={tempImages.length >= MAX_FILE_COUNT}\n            >\n              {localeText('dataset.import.modal.upload')}\n            </Button>\n          </Upload>\n        </Form.Item>\n        <Form.Item\n          label={<h4>{localeText('annotator.formModal.categories')}</h4>}\n        >\n          <div className={styles.categories}>\n            <div className={styles['categories-add']}>\n              <Form.Item name=\"categoryStr\" initialValue={''}>\n                <Input.TextArea\n                  className={styles['categories-add-textarea']}\n                  rows={6}\n                  placeholder={localeText(\n                    'annotator.formModal.categoryPlaceholder',\n                  )}\n                  onKeyDown={(e) => e.stopPropagation()}\n                  allowClear\n                  value={form.getFieldValue('categoryStr')}\n                />\n              </Form.Item>\n              <Button\n                className={styles['categories-add-btn']}\n                onClick={addTempCategories}\n              >\n                {localeText('annotator.formModal.addCategory')}\n              </Button>\n            </div>\n            <div className={styles['categories-current']}>\n              <Form.Item\n                name=\"tempCategories\"\n                rules={[{ validator: validateCategories }]}\n              >\n                <List\n                  className={styles['categories-current-list']}\n                  bordered\n                  size=\"small\"\n                  dataSource={tempCategories}\n                  renderItem={(item) => (\n                    <List.Item\n                      className={styles['categories-current-list-item']}\n                      style={{ padding: '2px 16px' }}\n                      key={item.id}\n                      actions={[\n                        <Button\n                          danger\n                          type=\"text\"\n                          icon={<DeleteOutlined />}\n                          key=\"delete\"\n                          onClick={() => {\n                            if (hasRelatedAnnots(item.name)) {\n                              openNotification({\n                                message: localeText(\n                                  'annotator.formModal.deleteCategory.title',\n                                ),\n                                description: localeText(\n                                  'annotator.formModal.deleteCategory.desc',\n                                ),\n                                duration: 3,\n                              });\n                            } else {\n                              deleteTempCategories(item.name);\n                            }\n                          }}\n                        />,\n                      ]}\n                    >\n                      {item.name}\n                    </List.Item>\n                  )}\n                />\n              </Form.Item>\n              <p className={styles['categories-current-text']}>{`${localeText(\n                'annotator.formModal.categoriesCount',\n              )}: ${tempCategories.length}`}</p>\n            </div>\n          </div>\n        </Form.Item>\n      </Form>\n    </Modal>\n  );\n};\n"],"names":[],"sourceRoot":""}