{"version":3,"file":"422.e1c904d6.async.js","mappings":";AAsDA;ACgnBA","sources":["webpack://app/../../node_modules/.pnpm/@ant-design+pro-card@2.5.14_antd@4.24.13_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/pro-card/es/components/Actions/style.js","webpack://app/../../node_modules/.pnpm/@ant-design+pro-utils@2.14.2_antd@4.24.13_react-dom@18.2.0_react@18.2.0/node_modules/@ant-design/pro-utils/es/useEditableArray/index.js"],"sourcesContent":["import _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport { useStyle as useAntdStyle } from '@ant-design/pro-provider';\nvar genActionsStyle = function genActionsStyle(token) {\n  var _div, _$concat;\n  var componentCls = token.componentCls,\n    antCls = token.antCls;\n  return _defineProperty({}, \"\".concat(componentCls, \"-actions\"), (_$concat = {\n    marginBlock: 0,\n    marginInline: 0,\n    paddingBlock: 0,\n    paddingInline: 0,\n    listStyle: 'none',\n    display: 'flex',\n    gap: token.marginXS,\n    background: token.colorBgContainer,\n    borderBlockStart: \"\".concat(token.lineWidth, \"px \").concat(token.lineType, \" \").concat(token.colorSplit),\n    minHeight: 42\n  }, _defineProperty(_$concat, \"& > *\", {\n    alignItems: 'center',\n    justifyContent: 'center',\n    flex: 1,\n    display: 'flex',\n    cursor: 'pointer',\n    color: token.colorTextSecondary,\n    transition: 'color 0.3s',\n    '&:hover': {\n      color: token.colorPrimaryHover\n    }\n  }), _defineProperty(_$concat, \"& > li > div\", {\n    flex: 1,\n    width: '100%',\n    marginBlock: token.marginSM,\n    marginInline: 0,\n    color: token.colorTextSecondary,\n    textAlign: 'center',\n    a: {\n      color: token.colorTextSecondary,\n      transition: 'color 0.3s',\n      '&:hover': {\n        color: token.colorPrimaryHover\n      }\n    },\n    div: (_div = {\n      position: 'relative',\n      display: 'block',\n      minWidth: 32,\n      fontSize: token.fontSize,\n      lineHeight: token.lineHeight,\n      cursor: 'pointer',\n      '&:hover': {\n        color: token.colorPrimaryHover,\n        transition: 'color 0.3s'\n      }\n    }, _defineProperty(_div, \"a:not(\".concat(antCls, \"-btn),\\n            > .anticon\"), {\n      display: 'inline-block',\n      width: '100%',\n      color: token.colorTextSecondary,\n      lineHeight: '22px',\n      transition: 'color 0.3s',\n      '&:hover': {\n        color: token.colorPrimaryHover\n      }\n    }), _defineProperty(_div, '.anticon', {\n      fontSize: token.cardActionIconSize,\n      lineHeight: '22px'\n    }), _div),\n    '&:not(:last-child)': {\n      borderInlineEnd: \"\".concat(token.lineWidth, \"px \").concat(token.lineType, \" \").concat(token.colorSplit)\n    }\n  }), _$concat));\n};\nexport default function useStyle(prefixCls) {\n  return useAntdStyle('ProCardActions', function (token) {\n    var proCardActionsToken = _objectSpread(_objectSpread({}, token), {}, {\n      componentCls: \".\".concat(prefixCls),\n      cardActionIconSize: 16\n    });\n    return [genActionsStyle(proCardActionsToken)];\n  });\n}","import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _regeneratorRuntime from \"@babel/runtime/helpers/esm/regeneratorRuntime\";\nimport _toArray from \"@babel/runtime/helpers/esm/toArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/esm/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\nimport _objectWithoutProperties from \"@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport _objectSpread from \"@babel/runtime/helpers/esm/objectSpread2\";\nimport _typeof from \"@babel/runtime/helpers/esm/typeof\";\nvar _excluded = [\"map_row_parentKey\"],\n  _excluded2 = [\"map_row_parentKey\", \"map_row_key\"],\n  _excluded3 = [\"map_row_key\"];\n/* eslint-disable react-hooks/exhaustive-deps */\nimport { LoadingOutlined } from '@ant-design/icons';\nimport { useIntl } from '@ant-design/pro-provider';\nimport { Form, message, Popconfirm } from 'antd';\nimport useLazyKVMap from \"antd/es/table/hooks/useLazyKVMap\";\nimport useMergedState from \"rc-util/es/hooks/useMergedState\";\nimport get from \"rc-util/es/utils/get\";\nimport set from \"rc-util/es/utils/set\";\nimport { noteOnce } from \"rc-util/es/warning\";\nimport React, { createRef, forwardRef, useContext, useEffect, useImperativeHandle, useMemo, useRef, useState } from 'react';\nimport { useDebounceFn, useRefFunction } from '..';\nimport { ProFormContext } from \"../components/ProFormContext\";\nimport { useDeepCompareEffectDebounce } from \"../hooks/useDeepCompareEffect\";\nimport { usePrevious } from \"../hooks/usePrevious\";\nimport { merge } from \"../merge\";\nimport { useMountMergeState } from \"../useMountMergeState\";\n\n/**\n * 兼容antd@4 和 antd@5 的warning\n * @param messageStr\n */\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar warning = function warning(messageStr) {\n  // @ts-ignore\n  return (message.warn || message.warning)(messageStr);\n};\nexport var recordKeyToString = function recordKeyToString(rowKey) {\n  if (Array.isArray(rowKey)) return rowKey.join(',');\n  return rowKey;\n};\n/**\n * 使用map 来删除数据，性能一般 但是准确率比较高\n *\n * @param keyProps\n * @param action\n */\nexport function editableRowByKey(keyProps, action) {\n  var _recordKeyToString;\n  var getRowKey = keyProps.getRowKey,\n    row = keyProps.row,\n    data = keyProps.data,\n    _keyProps$childrenCol = keyProps.childrenColumnName,\n    childrenColumnName = _keyProps$childrenCol === void 0 ? 'children' : _keyProps$childrenCol;\n  var key = (_recordKeyToString = recordKeyToString(keyProps.key)) === null || _recordKeyToString === void 0 ? void 0 : _recordKeyToString.toString();\n  var kvMap = new Map();\n\n  /**\n   * 打平这个数组\n   *\n   * @param records\n   * @param parentKey\n   */\n  function dig(records, map_row_parentKey, map_row_index) {\n    records.forEach(function (record, index) {\n      var eachIndex = (map_row_index || 0) * 10 + index;\n      var recordKey = getRowKey(record, eachIndex).toString();\n      // children 取在前面方便拼的时候按照反顺序放回去\n      if (record && _typeof(record) === 'object' && childrenColumnName in record) {\n        dig(record[childrenColumnName] || [], recordKey, eachIndex);\n      }\n      var newRecord = _objectSpread(_objectSpread({}, record), {}, {\n        map_row_key: recordKey,\n        children: undefined,\n        map_row_parentKey: map_row_parentKey\n      });\n      delete newRecord.children;\n      if (!map_row_parentKey) {\n        delete newRecord.map_row_parentKey;\n      }\n      kvMap.set(recordKey, newRecord);\n    });\n  }\n  if (action === 'top') {\n    kvMap.set(key, _objectSpread(_objectSpread({}, kvMap.get(key)), row));\n  }\n  dig(data);\n  if (action === 'update') {\n    kvMap.set(key, _objectSpread(_objectSpread({}, kvMap.get(key)), row));\n  }\n  if (action === 'delete') {\n    kvMap.delete(key);\n  }\n  var fill = function fill(map) {\n    var kvArrayMap = new Map();\n    var kvSource = [];\n    var fillNewRecord = function fillNewRecord() {\n      var fillChildren = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;\n      map.forEach(function (value) {\n        if (value.map_row_parentKey && !value.map_row_key) {\n          var map_row_parentKey = value.map_row_parentKey,\n            rest = _objectWithoutProperties(value, _excluded);\n          if (!kvArrayMap.has(map_row_parentKey)) {\n            kvArrayMap.set(map_row_parentKey, []);\n          }\n          if (fillChildren) {\n            var _kvArrayMap$get;\n            (_kvArrayMap$get = kvArrayMap.get(map_row_parentKey)) === null || _kvArrayMap$get === void 0 ? void 0 : _kvArrayMap$get.push(rest);\n          }\n        }\n      });\n    };\n    fillNewRecord(action === 'top');\n    map.forEach(function (value) {\n      if (value.map_row_parentKey && value.map_row_key) {\n        var _kvArrayMap$get2;\n        var map_row_parentKey = value.map_row_parentKey,\n          map_row_key = value.map_row_key,\n          rest = _objectWithoutProperties(value, _excluded2);\n        if (kvArrayMap.has(map_row_key)) {\n          rest[childrenColumnName] = kvArrayMap.get(map_row_key);\n        }\n        if (!kvArrayMap.has(map_row_parentKey)) {\n          kvArrayMap.set(map_row_parentKey, []);\n        }\n        (_kvArrayMap$get2 = kvArrayMap.get(map_row_parentKey)) === null || _kvArrayMap$get2 === void 0 ? void 0 : _kvArrayMap$get2.push(rest);\n      }\n    });\n    fillNewRecord(action === 'update');\n    map.forEach(function (value) {\n      if (!value.map_row_parentKey) {\n        var map_row_key = value.map_row_key,\n          rest = _objectWithoutProperties(value, _excluded3);\n        if (map_row_key && kvArrayMap.has(map_row_key)) {\n          var item = _objectSpread(_objectSpread({}, rest), {}, _defineProperty({}, childrenColumnName, kvArrayMap.get(map_row_key)));\n          kvSource.push(item);\n          return;\n        }\n        kvSource.push(rest);\n      }\n    });\n    return kvSource;\n  };\n  return fill(kvMap);\n}\n\n/**\n * 保存按钮的dom\n *\n * @param ActionRenderConfig\n */\nexport function SaveEditableAction(_ref, ref) {\n  var recordKey = _ref.recordKey,\n    onSave = _ref.onSave,\n    row = _ref.row,\n    children = _ref.children,\n    newLineConfig = _ref.newLineConfig,\n    editorType = _ref.editorType,\n    tableName = _ref.tableName;\n  var context = useContext(ProFormContext);\n  var form = Form.useFormInstance();\n  var _useMountMergeState = useMountMergeState(false),\n    _useMountMergeState2 = _slicedToArray(_useMountMergeState, 2),\n    loading = _useMountMergeState2[0],\n    setLoading = _useMountMergeState2[1];\n  var save = useRefFunction( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee() {\n    var _context$getFieldForm, isMapEditor, namePath, fields, _recordKey, recordKeyPath, curValue, data, res;\n    return _regeneratorRuntime().wrap(function _callee$(_context) {\n      while (1) switch (_context.prev = _context.next) {\n        case 0:\n          _context.prev = 0;\n          isMapEditor = editorType === 'Map'; // 为了兼容类型为 array 的 dataIndex,当 recordKey 是一个数组时，用于获取表单值的 key 只取第一项，\n          // 从表单中获取回来之后，再根据 namepath 获取具体的某个字段并设置\n          namePath = [tableName, Array.isArray(recordKey) ? recordKey[0] : recordKey].map(function (key) {\n            return key === null || key === void 0 ? void 0 : key.toString();\n          }).flat(1).filter(Boolean);\n          setLoading(true);\n          _context.next = 6;\n          return form.validateFields(namePath, {\n            // @ts-expect-error\n            recursive: true\n          });\n        case 6:\n          fields = (context === null || context === void 0 ? void 0 : (_context$getFieldForm = context.getFieldFormatValue) === null || _context$getFieldForm === void 0 ? void 0 : _context$getFieldForm.call(context, namePath)) || form.getFieldValue(namePath); // 处理 dataIndex 为数组的情况\n          if (Array.isArray(recordKey) && recordKey.length > 1) {\n            // 获取 namepath\n            _recordKey = _toArray(recordKey), recordKeyPath = _recordKey.slice(1); // 将目标值获取出来并设置到 fields 当中\n            curValue = get(fields, recordKeyPath);\n            set(fields, recordKeyPath, curValue);\n          }\n          data = isMapEditor ? set({}, namePath, fields, true) : fields; // 获取数据并保存\n          _context.next = 11;\n          return onSave === null || onSave === void 0 ? void 0 : onSave(recordKey,\n          // 如果是 map 模式，fields 就是一个值，所以需要set 到对象中\n          // 数据模式 fields 是一个对象，所以不需要\n          merge({}, row, data), row, newLineConfig);\n        case 11:\n          res = _context.sent;\n          setLoading(false);\n          return _context.abrupt(\"return\", res);\n        case 16:\n          _context.prev = 16;\n          _context.t0 = _context[\"catch\"](0);\n          // eslint-disable-next-line no-console\n          console.log(_context.t0);\n          setLoading(false);\n          throw _context.t0;\n        case 21:\n        case \"end\":\n          return _context.stop();\n      }\n    }, _callee, null, [[0, 16]]);\n  })));\n\n  // 保存数据\n  useImperativeHandle(ref, function () {\n    return {\n      save: save\n    };\n  }, [save]);\n  return /*#__PURE__*/_jsxs(\"a\", {\n    onClick: /*#__PURE__*/function () {\n      var _ref3 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee2(e) {\n        return _regeneratorRuntime().wrap(function _callee2$(_context2) {\n          while (1) switch (_context2.prev = _context2.next) {\n            case 0:\n              e.stopPropagation();\n              e.preventDefault();\n              _context2.prev = 2;\n              _context2.next = 5;\n              return save();\n            case 5:\n              _context2.next = 9;\n              break;\n            case 7:\n              _context2.prev = 7;\n              _context2.t0 = _context2[\"catch\"](2);\n            case 9:\n            case \"end\":\n              return _context2.stop();\n          }\n        }, _callee2, null, [[2, 7]]);\n      }));\n      return function (_x) {\n        return _ref3.apply(this, arguments);\n      };\n    }(),\n    children: [loading ? /*#__PURE__*/_jsx(LoadingOutlined, {\n      style: {\n        marginInlineEnd: 8\n      }\n    }) : null, children || '保存']\n  }, \"save\");\n}\n/**\n * 删除按钮 dom\n *\n * @param ActionRenderConfig\n */\nexport var DeleteEditableAction = function DeleteEditableAction(_ref4) {\n  var recordKey = _ref4.recordKey,\n    onDelete = _ref4.onDelete,\n    row = _ref4.row,\n    children = _ref4.children,\n    deletePopconfirmMessage = _ref4.deletePopconfirmMessage;\n  var _useMountMergeState3 = useMountMergeState(function () {\n      return false;\n    }),\n    _useMountMergeState4 = _slicedToArray(_useMountMergeState3, 2),\n    loading = _useMountMergeState4[0],\n    setLoading = _useMountMergeState4[1];\n  var _onConfirm = useRefFunction( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee3() {\n    var res;\n    return _regeneratorRuntime().wrap(function _callee3$(_context3) {\n      while (1) switch (_context3.prev = _context3.next) {\n        case 0:\n          _context3.prev = 0;\n          setLoading(true);\n          _context3.next = 4;\n          return onDelete === null || onDelete === void 0 ? void 0 : onDelete(recordKey, row);\n        case 4:\n          res = _context3.sent;\n          setLoading(false);\n          return _context3.abrupt(\"return\", res);\n        case 9:\n          _context3.prev = 9;\n          _context3.t0 = _context3[\"catch\"](0);\n          // eslint-disable-next-line no-console\n          console.log(_context3.t0);\n          setLoading(false);\n          return _context3.abrupt(\"return\", null);\n        case 14:\n        case \"end\":\n          return _context3.stop();\n      }\n    }, _callee3, null, [[0, 9]]);\n  })));\n  return children !== false ? /*#__PURE__*/_jsx(Popconfirm, {\n    title: deletePopconfirmMessage,\n    onConfirm: function onConfirm() {\n      return _onConfirm();\n    },\n    children: /*#__PURE__*/_jsxs(\"a\", {\n      children: [loading ? /*#__PURE__*/_jsx(LoadingOutlined, {\n        style: {\n          marginInlineEnd: 8\n        }\n      }) : null, children || '删除']\n    })\n  }, \"delete\") : null;\n};\nvar CancelEditableAction = function CancelEditableAction(props) {\n  var recordKey = props.recordKey,\n    tableName = props.tableName,\n    newLineConfig = props.newLineConfig,\n    editorType = props.editorType,\n    onCancel = props.onCancel,\n    cancelEditable = props.cancelEditable,\n    row = props.row,\n    cancelText = props.cancelText;\n  var context = useContext(ProFormContext);\n  var form = Form.useFormInstance();\n  return /*#__PURE__*/_jsx(\"a\", {\n    onClick: /*#__PURE__*/function () {\n      var _ref6 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee4(e) {\n        var _context$getFieldForm2;\n        var isMapEditor, namePath, fields, record, res;\n        return _regeneratorRuntime().wrap(function _callee4$(_context4) {\n          while (1) switch (_context4.prev = _context4.next) {\n            case 0:\n              e.stopPropagation();\n              e.preventDefault();\n              isMapEditor = editorType === 'Map';\n              namePath = [tableName, recordKey].flat(1).filter(Boolean);\n              fields = (context === null || context === void 0 ? void 0 : (_context$getFieldForm2 = context.getFieldFormatValue) === null || _context$getFieldForm2 === void 0 ? void 0 : _context$getFieldForm2.call(context, namePath)) || (form === null || form === void 0 ? void 0 : form.getFieldValue(namePath));\n              record = isMapEditor ? set({}, namePath, fields) : fields;\n              _context4.next = 8;\n              return onCancel === null || onCancel === void 0 ? void 0 : onCancel(recordKey, record, row, newLineConfig);\n            case 8:\n              res = _context4.sent;\n              _context4.next = 11;\n              return cancelEditable(recordKey);\n            case 11:\n              /** 重置为默认值，不然编辑的行会丢掉 */\n              form.setFieldsValue(_defineProperty({}, recordKey, isMapEditor ? get(row, namePath) : row));\n              return _context4.abrupt(\"return\", res);\n            case 13:\n            case \"end\":\n              return _context4.stop();\n          }\n        }, _callee4);\n      }));\n      return function (_x2) {\n        return _ref6.apply(this, arguments);\n      };\n    }(),\n    children: cancelText || '取消'\n  }, \"cancel\");\n};\nexport function defaultActionRender(row, config) {\n  var recordKey = config.recordKey,\n    newLineConfig = config.newLineConfig,\n    saveText = config.saveText,\n    deleteText = config.deleteText;\n  var SaveEditableActionRef = /*#__PURE__*/forwardRef(SaveEditableAction);\n  var saveRef = /*#__PURE__*/createRef();\n  return {\n    save: /*#__PURE__*/_jsx(SaveEditableActionRef, _objectSpread(_objectSpread({}, config), {}, {\n      row: row,\n      ref: saveRef,\n      children: saveText\n    }), 'save' + recordKey),\n    saveRef: saveRef,\n    delete: (newLineConfig === null || newLineConfig === void 0 ? void 0 : newLineConfig.options.recordKey) !== recordKey ? /*#__PURE__*/_jsx(DeleteEditableAction, _objectSpread(_objectSpread({}, config), {}, {\n      row: row,\n      children: deleteText\n    }), 'delete' + recordKey) : undefined,\n    cancel: /*#__PURE__*/_jsx(CancelEditableAction, _objectSpread(_objectSpread({}, config), {}, {\n      row: row\n    }), 'cancel' + recordKey)\n  };\n}\n\n/**\n * 一个方便的hooks 用于维护编辑的状态\n *\n * @param props\n */\nexport function useEditableArray(props) {\n  var _useState = useState(undefined),\n    _useState2 = _slicedToArray(_useState, 2),\n    newLineRecordCache = _useState2[0],\n    setNewLineRecordCache = _useState2[1];\n  var resetMapRef = function resetMapRef() {\n    var map = new Map();\n    //存在children时会覆盖Map的key,导致使用数组索引查找key错误\n    var loopGetKey = function loopGetKey(dataSource, parentKey) {\n      dataSource === null || dataSource === void 0 ? void 0 : dataSource.forEach(function (record, index) {\n        var _recordKeyToString2;\n        var key = parentKey === undefined || parentKey === null ? index.toString() : parentKey + '_' + index.toString();\n        map.set(key, recordKeyToString(props.getRowKey(record, -1)));\n        map.set((_recordKeyToString2 = recordKeyToString(props.getRowKey(record, -1))) === null || _recordKeyToString2 === void 0 ? void 0 : _recordKeyToString2.toString(), key);\n        if (props.childrenColumnName && record[props.childrenColumnName]) {\n          loopGetKey(record[props.childrenColumnName], key);\n        }\n      });\n    };\n    loopGetKey(props.dataSource);\n    return map;\n  };\n  var initDataSourceKeyIndexMap = useMemo(function () {\n    return resetMapRef();\n  }, []);\n  var dataSourceKeyIndexMapRef = useRef(initDataSourceKeyIndexMap);\n  var newLineRecordRef = useRef(undefined);\n  useDeepCompareEffectDebounce(function () {\n    dataSourceKeyIndexMapRef.current = resetMapRef();\n  }, [props.dataSource]);\n\n  // 这里这么做是为了存上次的状态，不然每次存一下再拿\n  newLineRecordRef.current = newLineRecordCache;\n  var editableType = props.type || 'single';\n  var _useLazyKVMap = useLazyKVMap(props.dataSource, 'children', props.getRowKey),\n    _useLazyKVMap2 = _slicedToArray(_useLazyKVMap, 1),\n    getRecordByKey = _useLazyKVMap2[0];\n  var _useMergedState = useMergedState([], {\n      value: props.editableKeys,\n      onChange: props.onChange ? function (keys) {\n        var _props$onChange, _keys$filter, _keys$map$filter;\n        props === null || props === void 0 ? void 0 : (_props$onChange = props.onChange) === null || _props$onChange === void 0 ? void 0 : _props$onChange.call(props, // 计算编辑的key\n        (_keys$filter = keys === null || keys === void 0 ? void 0 : keys.filter(function (key) {\n          return key !== undefined;\n        })) !== null && _keys$filter !== void 0 ? _keys$filter : [], // 计算编辑的行\n        (_keys$map$filter = keys === null || keys === void 0 ? void 0 : keys.map(function (key) {\n          return getRecordByKey(key);\n        }).filter(function (key) {\n          return key !== undefined;\n        })) !== null && _keys$map$filter !== void 0 ? _keys$map$filter : []);\n      } : undefined\n    }),\n    _useMergedState2 = _slicedToArray(_useMergedState, 2),\n    editableKeys = _useMergedState2[0],\n    setEditableRowKeys = _useMergedState2[1];\n\n  /** 一个用来标志的set 提供了方便的 api 来去重什么的 */\n  var editableKeysSet = useMemo(function () {\n    var keys = editableType === 'single' ? editableKeys === null || editableKeys === void 0 ? void 0 : editableKeys.slice(0, 1) : editableKeys;\n    return new Set(keys);\n  }, [(editableKeys || []).join(','), editableType]);\n  var editableKeysRef = usePrevious(editableKeys);\n\n  /** 这行是不是编辑状态 */\n  var isEditable = useRefFunction(function (row) {\n    var _props$getRowKey, _props$getRowKey$toSt, _props$getRowKey2, _props$getRowKey2$toS;\n    // 为了兼容一下name 模式的 indexKey，所以需要判断两次，一次是index，一次是没有 index 的\n    var recordKeyOrIndex = (_props$getRowKey = props.getRowKey(row, row.index)) === null || _props$getRowKey === void 0 ? void 0 : (_props$getRowKey$toSt = _props$getRowKey.toString) === null || _props$getRowKey$toSt === void 0 ? void 0 : _props$getRowKey$toSt.call(_props$getRowKey);\n    // 这里是不设置 index 的地方\n    var recordKey = (_props$getRowKey2 = props.getRowKey(row, -1)) === null || _props$getRowKey2 === void 0 ? void 0 : (_props$getRowKey2$toS = _props$getRowKey2.toString) === null || _props$getRowKey2$toS === void 0 ? void 0 : _props$getRowKey2$toS.call(_props$getRowKey2);\n\n    // 都转化为了字符串，不然 number 和 string\n    var stringEditableKeys = editableKeys === null || editableKeys === void 0 ? void 0 : editableKeys.map(function (key) {\n      return key === null || key === void 0 ? void 0 : key.toString();\n    });\n    var stringEditableKeysRef = (editableKeysRef === null || editableKeysRef === void 0 ? void 0 : editableKeysRef.map(function (key) {\n      return key === null || key === void 0 ? void 0 : key.toString();\n    })) || [];\n    var preIsEditable = props.tableName && !!(stringEditableKeysRef !== null && stringEditableKeysRef !== void 0 && stringEditableKeysRef.includes(recordKey)) || !!(stringEditableKeysRef !== null && stringEditableKeysRef !== void 0 && stringEditableKeysRef.includes(recordKeyOrIndex));\n    return {\n      recordKey: recordKey,\n      isEditable: props.tableName && (stringEditableKeys === null || stringEditableKeys === void 0 ? void 0 : stringEditableKeys.includes(recordKey)) || (stringEditableKeys === null || stringEditableKeys === void 0 ? void 0 : stringEditableKeys.includes(recordKeyOrIndex)),\n      preIsEditable: preIsEditable\n    };\n  });\n\n  /**\n   * 进入编辑状态\n   *\n   * @param recordKey\n   */\n  var startEditable = useRefFunction(function (recordKey) {\n    // 如果是单行的话，不允许多行编辑\n    if (editableKeysSet.size > 0 && editableType === 'single' && props.onlyOneLineEditorAlertMessage !== false) {\n      warning(props.onlyOneLineEditorAlertMessage || '只能同时编辑一行');\n      return false;\n    }\n    editableKeysSet.add(recordKey);\n    setEditableRowKeys(Array.from(editableKeysSet));\n    return true;\n  });\n\n  /**\n   * 退出编辑状态\n   *\n   * @param recordKey\n   */\n  var cancelEditable = useRefFunction( /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee5(recordKey, needReTry) {\n      var relayKey, key;\n      return _regeneratorRuntime().wrap(function _callee5$(_context5) {\n        while (1) switch (_context5.prev = _context5.next) {\n          case 0:\n            relayKey = recordKeyToString(recordKey).toString();\n            key = dataSourceKeyIndexMapRef.current.get(relayKey);\n            /** 如果没找到key，转化一下再去找 */\n            if (!(!editableKeysSet.has(relayKey) && key && (needReTry !== null && needReTry !== void 0 ? needReTry : true) && props.tableName)) {\n              _context5.next = 5;\n              break;\n            }\n            cancelEditable(key, false);\n            return _context5.abrupt(\"return\");\n          case 5:\n            /** 如果这个是 new Line 直接删除 */\n            if (newLineRecordCache && newLineRecordCache.options.recordKey === recordKey) {\n              setNewLineRecordCache(undefined);\n            }\n            editableKeysSet.delete(relayKey);\n            editableKeysSet.delete(recordKeyToString(recordKey));\n            setEditableRowKeys(Array.from(editableKeysSet));\n            return _context5.abrupt(\"return\", true);\n          case 10:\n          case \"end\":\n            return _context5.stop();\n        }\n      }, _callee5);\n    }));\n    return function (_x3, _x4) {\n      return _ref7.apply(this, arguments);\n    };\n  }());\n  var propsOnValuesChange = useDebounceFn( /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee6() {\n    var _props$onValuesChange;\n    var _len,\n      rest,\n      _key,\n      _args6 = arguments;\n    return _regeneratorRuntime().wrap(function _callee6$(_context6) {\n      while (1) switch (_context6.prev = _context6.next) {\n        case 0:\n          for (_len = _args6.length, rest = new Array(_len), _key = 0; _key < _len; _key++) {\n            rest[_key] = _args6[_key];\n          }\n          //@ts-ignore\n          (_props$onValuesChange = props.onValuesChange) === null || _props$onValuesChange === void 0 ? void 0 : _props$onValuesChange.call.apply(_props$onValuesChange, [props].concat(rest));\n        case 2:\n        case \"end\":\n          return _context6.stop();\n      }\n    }, _callee6);\n  })), 64);\n  var onValuesChange = useRefFunction(function (value, values) {\n    var _Object$keys$pop;\n    if (!props.onValuesChange) {\n      return;\n    }\n    var dataSource = props.dataSource;\n\n    // 这里是把正在编辑中的所有表单数据都修改掉\n    // 不然会用 props 里面的 dataSource，数据只有正在编辑中的\n    // Object.keys(get(values, [props.tableName || ''].flat(1)) || values).forEach((recordKey) => {\n    editableKeys === null || editableKeys === void 0 ? void 0 : editableKeys.forEach(function (eachRecordKey) {\n      if ((newLineRecordCache === null || newLineRecordCache === void 0 ? void 0 : newLineRecordCache.options.recordKey) === eachRecordKey) return;\n      var recordKey = eachRecordKey.toString();\n      // 如果数据在这个 form 中没有展示，也不显示\n      var editRow = get(values, [props.tableName || '', recordKey].flat(1).filter(function (key) {\n        return key || key === 0;\n      }));\n      if (!editRow) return;\n      dataSource = editableRowByKey({\n        data: dataSource,\n        getRowKey: props.getRowKey,\n        row: editRow,\n        key: recordKey,\n        childrenColumnName: props.childrenColumnName || 'children'\n      }, 'update');\n    });\n    var relayValue = value;\n    var recordKey = (_Object$keys$pop = Object.keys(relayValue || {}).pop()) === null || _Object$keys$pop === void 0 ? void 0 : _Object$keys$pop.toString();\n\n    //从form 和 cache 中取得数据\n    var newLineRecordData = _objectSpread(_objectSpread({}, newLineRecordCache === null || newLineRecordCache === void 0 ? void 0 : newLineRecordCache.defaultValue), get(values, [props.tableName || '', recordKey.toString()].flat(1).filter(function (key) {\n      return key || key === 0;\n    })));\n\n    /** 如果已经在 dataSource 中存在了，直接 find */\n    var editRow = dataSourceKeyIndexMapRef.current.has(recordKeyToString(recordKey)) ? dataSource.find(function (item, index) {\n      var _props$getRowKey3;\n      var key = (_props$getRowKey3 = props.getRowKey(item, index)) === null || _props$getRowKey3 === void 0 ? void 0 : _props$getRowKey3.toString();\n      return key === recordKey;\n    }) : newLineRecordData;\n    propsOnValuesChange.run(editRow || newLineRecordData, dataSource);\n  });\n  var saveRefsMap = useRef(new Map());\n  useEffect(function () {\n    // 确保只保留编辑状态的，其它的都删除掉\n    saveRefsMap.current.forEach(function (ref, key) {\n      if (!editableKeysSet.has(key)) {\n        saveRefsMap.current.delete(key);\n      }\n    });\n  }, [saveRefsMap, editableKeysSet]);\n  /**\n   * 保存编辑行\n   *\n   * @param recordKey\n   * @param needReTry\n   */\n  var saveEditable = useRefFunction( /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee7(recordKey, needReTry) {\n      var relayKey, key, saveRef, _saveRef$current;\n      return _regeneratorRuntime().wrap(function _callee7$(_context7) {\n        while (1) switch (_context7.prev = _context7.next) {\n          case 0:\n            relayKey = recordKeyToString(recordKey);\n            key = dataSourceKeyIndexMapRef.current.get(recordKey.toString());\n            /** 如果没找到key，转化一下再去找 */\n            if (!(!editableKeysSet.has(relayKey) && key && (needReTry !== null && needReTry !== void 0 ? needReTry : true) && props.tableName)) {\n              _context7.next = 6;\n              break;\n            }\n            _context7.next = 5;\n            return saveEditable(key, false);\n          case 5:\n            return _context7.abrupt(\"return\", _context7.sent);\n          case 6:\n            saveRef = saveRefsMap.current.get(relayKey) || saveRefsMap.current.get(relayKey.toString());\n            _context7.prev = 7;\n            _context7.next = 10;\n            return saveRef === null || saveRef === void 0 ? void 0 : (_saveRef$current = saveRef.current) === null || _saveRef$current === void 0 ? void 0 : _saveRef$current.save();\n          case 10:\n            _context7.next = 15;\n            break;\n          case 12:\n            _context7.prev = 12;\n            _context7.t0 = _context7[\"catch\"](7);\n            return _context7.abrupt(\"return\", false);\n          case 15:\n            editableKeysSet.delete(relayKey);\n            editableKeysSet.delete(relayKey.toString());\n            setEditableRowKeys(Array.from(editableKeysSet));\n            return _context7.abrupt(\"return\", true);\n          case 19:\n          case \"end\":\n            return _context7.stop();\n        }\n      }, _callee7, null, [[7, 12]]);\n    }));\n    return function (_x5, _x6) {\n      return _ref9.apply(this, arguments);\n    };\n  }());\n\n  /**\n   * 同时只能支持一行,取消之后数据消息，不会触发 dataSource\n   *\n   * @param row\n   * @param options\n   * @name 增加新的行\n   */\n  var addEditRecord = useRefFunction(function (row, options) {\n    if (options !== null && options !== void 0 && options.parentKey && !dataSourceKeyIndexMapRef.current.has(recordKeyToString(options === null || options === void 0 ? void 0 : options.parentKey).toString())) {\n      console.warn(\"can't find record by key\", options === null || options === void 0 ? void 0 : options.parentKey);\n      return false;\n    }\n    // 暂时不支持多行新增\n    if (newLineRecordRef.current && props.onlyAddOneLineAlertMessage !== false) {\n      warning(props.onlyAddOneLineAlertMessage || '只能新增一行');\n      return false;\n    }\n    // 如果是单行的话，不允许多行编辑\n    if (editableKeysSet.size > 0 && editableType === 'single' && props.onlyOneLineEditorAlertMessage !== false) {\n      warning(props.onlyOneLineEditorAlertMessage || '只能同时编辑一行');\n      return false;\n    }\n    // 防止多次渲染\n    var recordKey = props.getRowKey(row, -1);\n    if (!recordKey && recordKey !== 0) {\n      noteOnce(!!recordKey, '请设置 recordCreatorProps.record 并返回一个唯一的key  \\n  https://procomponents.ant.design/components/editable-table#editable-%E6%96%B0%E5%BB%BA%E8%A1%8C');\n      throw new Error('请设置 recordCreatorProps.record 并返回一个唯一的key');\n    }\n    editableKeysSet.add(recordKey);\n    setEditableRowKeys(Array.from(editableKeysSet));\n\n    // 如果是dataSource 新增模式的话，取消再开始编辑，\n    // 这样就可以把新增到 dataSource的数据进入编辑模式了\n    // [a,b,cache] => [a,b,c]\n    if ((options === null || options === void 0 ? void 0 : options.newRecordType) === 'dataSource' || props.tableName) {\n      var _recordKeyToString3;\n      var actionProps = {\n        data: props.dataSource,\n        getRowKey: props.getRowKey,\n        row: _objectSpread(_objectSpread({}, row), {}, {\n          map_row_parentKey: options !== null && options !== void 0 && options.parentKey ? (_recordKeyToString3 = recordKeyToString(options === null || options === void 0 ? void 0 : options.parentKey)) === null || _recordKeyToString3 === void 0 ? void 0 : _recordKeyToString3.toString() : undefined\n        }),\n        key: recordKey,\n        childrenColumnName: props.childrenColumnName || 'children'\n      };\n      props.setDataSource(editableRowByKey(actionProps, (options === null || options === void 0 ? void 0 : options.position) === 'top' ? 'top' : 'update'));\n    } else {\n      setNewLineRecordCache({\n        defaultValue: row,\n        options: _objectSpread(_objectSpread({}, options), {}, {\n          recordKey: recordKey\n        })\n      });\n    }\n    return true;\n  });\n\n  // Internationalization\n  var intl = useIntl();\n  var saveText = (props === null || props === void 0 ? void 0 : props.saveText) || intl.getMessage('editableTable.action.save', '保存');\n  var deleteText = (props === null || props === void 0 ? void 0 : props.deleteText) || intl.getMessage('editableTable.action.delete', '删除');\n  var cancelText = (props === null || props === void 0 ? void 0 : props.cancelText) || intl.getMessage('editableTable.action.cancel', '取消');\n  var actionSaveRef = useRefFunction( /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee8(recordKey, editRow, originRow, newLine) {\n      var _props$onSave, _recordKeyToString4, _options$parentKey;\n      var res, _ref11, options, actionProps;\n      return _regeneratorRuntime().wrap(function _callee8$(_context8) {\n        while (1) switch (_context8.prev = _context8.next) {\n          case 0:\n            _context8.next = 2;\n            return props === null || props === void 0 ? void 0 : (_props$onSave = props.onSave) === null || _props$onSave === void 0 ? void 0 : _props$onSave.call(props, recordKey, editRow, originRow, newLine);\n          case 2:\n            res = _context8.sent;\n            _context8.next = 5;\n            return cancelEditable(recordKey);\n          case 5:\n            _ref11 = newLine || newLineRecordRef.current || {}, options = _ref11.options;\n            if (!(!(options !== null && options !== void 0 && options.parentKey) && (options === null || options === void 0 ? void 0 : options.recordKey) === recordKey)) {\n              _context8.next = 9;\n              break;\n            }\n            if ((options === null || options === void 0 ? void 0 : options.position) === 'top') {\n              props.setDataSource([editRow].concat(_toConsumableArray(props.dataSource)));\n            } else {\n              props.setDataSource([].concat(_toConsumableArray(props.dataSource), [editRow]));\n            }\n            return _context8.abrupt(\"return\", res);\n          case 9:\n            actionProps = {\n              data: props.dataSource,\n              getRowKey: props.getRowKey,\n              row: options ? _objectSpread(_objectSpread({}, editRow), {}, {\n                map_row_parentKey: (_recordKeyToString4 = recordKeyToString((_options$parentKey = options === null || options === void 0 ? void 0 : options.parentKey) !== null && _options$parentKey !== void 0 ? _options$parentKey : '')) === null || _recordKeyToString4 === void 0 ? void 0 : _recordKeyToString4.toString()\n              }) : editRow,\n              key: recordKey,\n              childrenColumnName: props.childrenColumnName || 'children'\n            };\n            props.setDataSource(editableRowByKey(actionProps, (options === null || options === void 0 ? void 0 : options.position) === 'top' ? 'top' : 'update'));\n            _context8.next = 13;\n            return cancelEditable(recordKey);\n          case 13:\n            return _context8.abrupt(\"return\", res);\n          case 14:\n          case \"end\":\n            return _context8.stop();\n        }\n      }, _callee8);\n    }));\n    return function (_x7, _x8, _x9, _x10) {\n      return _ref10.apply(this, arguments);\n    };\n  }());\n  var actionDeleteRef = useRefFunction( /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee9(recordKey, editRow) {\n      var _props$onDelete;\n      var actionProps, res;\n      return _regeneratorRuntime().wrap(function _callee9$(_context9) {\n        while (1) switch (_context9.prev = _context9.next) {\n          case 0:\n            actionProps = {\n              data: props.dataSource,\n              getRowKey: props.getRowKey,\n              row: editRow,\n              key: recordKey,\n              childrenColumnName: props.childrenColumnName || 'children'\n            };\n            _context9.next = 3;\n            return props === null || props === void 0 ? void 0 : (_props$onDelete = props.onDelete) === null || _props$onDelete === void 0 ? void 0 : _props$onDelete.call(props, recordKey, editRow);\n          case 3:\n            res = _context9.sent;\n            _context9.next = 6;\n            return cancelEditable(recordKey, false);\n          case 6:\n            props.setDataSource(editableRowByKey(actionProps, 'delete'));\n            return _context9.abrupt(\"return\", res);\n          case 8:\n          case \"end\":\n            return _context9.stop();\n        }\n      }, _callee9);\n    }));\n    return function (_x11, _x12) {\n      return _ref12.apply(this, arguments);\n    };\n  }());\n  var actionCancelRef = useRefFunction( /*#__PURE__*/function () {\n    var _ref13 = _asyncToGenerator( /*#__PURE__*/_regeneratorRuntime().mark(function _callee10(recordKey, editRow, originRow, newLine) {\n      var _props$onCancel;\n      var res;\n      return _regeneratorRuntime().wrap(function _callee10$(_context10) {\n        while (1) switch (_context10.prev = _context10.next) {\n          case 0:\n            _context10.next = 2;\n            return props === null || props === void 0 ? void 0 : (_props$onCancel = props.onCancel) === null || _props$onCancel === void 0 ? void 0 : _props$onCancel.call(props, recordKey, editRow, originRow, newLine);\n          case 2:\n            res = _context10.sent;\n            return _context10.abrupt(\"return\", res);\n          case 4:\n          case \"end\":\n            return _context10.stop();\n        }\n      }, _callee10);\n    }));\n    return function (_x13, _x14, _x15, _x16) {\n      return _ref13.apply(this, arguments);\n    };\n  }());\n  var actionRender = function actionRender(row) {\n    var key = props.getRowKey(row, row.index);\n    var config = {\n      saveText: saveText,\n      cancelText: cancelText,\n      deleteText: deleteText,\n      addEditRecord: addEditRecord,\n      recordKey: key,\n      cancelEditable: cancelEditable,\n      index: row.index,\n      tableName: props.tableName,\n      newLineConfig: newLineRecordCache,\n      onCancel: actionCancelRef,\n      onDelete: actionDeleteRef,\n      onSave: actionSaveRef,\n      editableKeys: editableKeys,\n      setEditableRowKeys: setEditableRowKeys,\n      deletePopconfirmMessage: props.deletePopconfirmMessage || \"\".concat(intl.getMessage('deleteThisLine', '删除此项'), \"?\")\n    };\n    var renderResult = defaultActionRender(row, config);\n    // 缓存一下saveRef\n    if (props.tableName) {\n      saveRefsMap.current.set(dataSourceKeyIndexMapRef.current.get(recordKeyToString(key)) || recordKeyToString(key), renderResult.saveRef);\n    } else {\n      saveRefsMap.current.set(recordKeyToString(key), renderResult.saveRef);\n    }\n    if (props.actionRender) return props.actionRender(row, config, {\n      save: renderResult.save,\n      delete: renderResult.delete,\n      cancel: renderResult.cancel\n    });\n    return [renderResult.save, renderResult.delete, renderResult.cancel];\n  };\n  return {\n    editableKeys: editableKeys,\n    setEditableRowKeys: setEditableRowKeys,\n    isEditable: isEditable,\n    actionRender: actionRender,\n    startEditable: startEditable,\n    cancelEditable: cancelEditable,\n    addEditRecord: addEditRecord,\n    saveEditable: saveEditable,\n    newLineRecord: newLineRecordCache,\n    preEditableKeys: editableKeysRef,\n    onValuesChange: onValuesChange\n  };\n}"],"names":[],"sourceRoot":""}